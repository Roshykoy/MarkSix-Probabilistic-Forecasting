
======================================================================
 STRUCTURAL ANALYSIS OF MAIN.PY
======================================================================
Started at: 2025-07-08 16:03:53
Working directory: /home/rheuks/projects/MarkSix-Probabilistic-Forecasting
Analyzing code structure without importing dependencies

──────────────────────────────────────────────────
📋 Analyzing main.py Structure
──────────────────────────────────────────────────
📊 Code Statistics:
   • Total lines: 4133
   • Functions: 13
   • Classes: 0
   • Imports: 27

──────────────────────────────────────────────────
📋 Feature Analysis
──────────────────────────────────────────────────
✅ Feature Training Functions: PASS
   Details: Found 10 implementations
✅ Feature Inference Functions: PASS
   Details: Found 8 implementations
✅ Feature Optimization Functions: PASS
   Details: Found 13 implementations
✅ Feature Configuration Functions: PASS
   Details: Found 6 implementations
✅ Feature Display Functions: PASS
   Details: Found 8 implementations
✅ Feature Menu Functions: PASS
   Details: Found 3 implementations
✅ Feature Model Functions: PASS
   Details: Found 9 implementations
✅ Feature Data Processing: PASS
   Details: Found 15 implementations

──────────────────────────────────────────────────
📋 Menu and Interface Analysis
──────────────────────────────────────────────────
📋 Menu Options Found:
   1. Optimized Training (20 epochs, ~94 min, hardware-optimized)
   1. AI Model Inference (CVAE + Meta-Learner)
   1. Standard generation (recommended)
   1. Conservative (frequent numbers, common patterns)
   1. Quick Validation (validate pipeline before full optimization)
   1. Testing optimization orchestrator...
   1. Train New Model (Optimized/Quick/Ultra-Quick/Standard)
   1. Basic System Check
   2. Quick Training (5 epochs, ~15 min, for testing)
   2. Statistical Pattern Analysis (no models needed)
   2. High diversity mode (more creative combinations)
   2. Balanced (mix of frequent and infrequent numbers)
   2. Thorough Search (8+ hour production optimization)
   2. Testing preset loading...
   2. Generate Predictions (AI/Statistical/Hybrid)
   2. Model Compatibility Test
   3. Ultra-Quick Training (3 epochs, ~5 min, minimal model)
   3. Hybrid Approach (AI + Statistical)
   3. Conservative mode (closer to historical patterns)
   3. Creative (less common patterns, strategic selection)
   3. Standard Optimization (1-2 hour balanced search)
   3. Testing environment setup...
   3. Evaluate Trained Model
   3. Full System Validation
   4. Standard Training (configurable, original pipeline)
   4. Custom Configuration (manual preset selection)
   4. Testing data loading...
   4. Optimize Hyperparameters (Validate/Thorough/Standard)
   5. Testing quick optimization...
   5. View Model Information
   6. System Diagnostics & Testing
   7. Exit
✅ Menu Structure: PASS
   Details: Found 32 menu options
✅ User Input Handling: PASS
   Details: Found 45 input handling patterns

──────────────────────────────────────────────────
📋 Error Handling Analysis
──────────────────────────────────────────────────
✅ Error Handling Try-Catch Blocks: PASS
   Details: Found 32 instances
✅ Error Handling Exception Handling: PASS
   Details: Found 20 instances
✅ Error Handling Traceback Printing: PASS
   Details: Found 8 instances
✅ Error Handling Error Messages: PASS
   Details: Found 1 instances
✅ Error Handling Validation: PASS
   Details: Found 1 instances
✅ Error Handling File Existence Checks: PASS
   Details: Found 13 instances
✅ Overall Error Handling: PASS
   Details: Comprehensive error handling (75 patterns)

──────────────────────────────────────────────────
📋 Dependency Analysis
──────────────────────────────────────────────────
📦 Import Analysis:
   • Total import statements: 35
✅ Imports Standard Library: PASS
   Details: Found 9 imports
✅ Imports Data Science: PASS
   Details: Found 2 imports
✅ Imports Deep Learning: PASS
   Details: Found 2 imports
⚠️ Imports Visualization: WARNING
   Details: No imports found
✅ Imports Local Modules: PASS
   Details: Found 18 imports
✅ Requirements requirements.txt: PASS
   Details: Requirements file exists
✅ Requirements requirements/base.txt: PASS
   Details: Requirements file exists
✅ Requirements environment.yml: PASS
   Details: Requirements file exists

──────────────────────────────────────────────────
📋 Project Structure Analysis
──────────────────────────────────────────────────
✅ Structure Core Files: PASS
   Details: Found: main.py, README.md
✅ Structure Source Code: PASS
   Details: Found: src/
✅ Structure Data: PASS
   Details: Found: data/, data/raw/
✅ Structure Models: PASS
   Details: Found: models/
✅ Structure Outputs: PASS
   Details: Found: outputs/
✅ Structure Requirements: PASS
   Details: Found: requirements/, requirements.txt, environment.yml
✅ Structure Configuration: PASS
   Details: Found: .gitignore
✅ Data File: PASS
   Details: Mark_Six.csv exists (0.4 MB)

======================================================================
 STRUCTURAL ANALYSIS RESULTS
======================================================================

=== FEATURE TEST RESULTS ===
Feature: Code Structure
Status: PASS
Details: Code parsed: 13 functions, 0 classes

Feature: Feature Analysis
Status: PASS
Details: Feature Training Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Inference Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Optimization Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Configuration Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Display Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Menu Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Model Functions

Feature: Feature Analysis
Status: PASS
Details: Feature Data Processing

Feature: Menu Analysis
Status: PASS
Details: Menu structure

Feature: Menu Analysis
Status: PASS
Details: User input handling

Feature: Error Handling
Status: PASS
Details: Error handling Try-Catch Blocks

Feature: Error Handling
Status: PASS
Details: Error handling Exception Handling

Feature: Error Handling
Status: PASS
Details: Error handling Traceback Printing

Feature: Error Handling
Status: PASS
Details: Error handling Error Messages

Feature: Error Handling
Status: PASS
Details: Error handling Validation

Feature: Error Handling
Status: PASS
Details: Error handling File Existence Checks

Feature: Error Handling
Status: PASS
Details: Overall error handling

Feature: Dependencies
Status: PASS
Details: Imports Standard Library

Feature: Dependencies
Status: PASS
Details: Imports Data Science

Feature: Dependencies
Status: PASS
Details: Imports Deep Learning

Feature: Dependencies
Status: WARNING
Details: Imports Visualization
Issues: Missing

Feature: Dependencies
Status: PASS
Details: Imports Local Modules

Feature: Dependencies
Status: PASS
Details: Requirements requirements.txt

Feature: Dependencies
Status: PASS
Details: Requirements requirements/base.txt

Feature: Dependencies
Status: PASS
Details: Requirements environment.yml

Feature: File Structure
Status: PASS
Details: Structure Core Files

Feature: File Structure
Status: PASS
Details: Structure Source Code

Feature: File Structure
Status: PASS
Details: Structure Data

Feature: File Structure
Status: PASS
Details: Structure Models

Feature: File Structure
Status: PASS
Details: Structure Outputs

Feature: File Structure
Status: PASS
Details: Structure Requirements

Feature: File Structure
Status: PASS
Details: Structure Configuration

Feature: File Structure
Status: PASS
Details: Data file

=== OVERALL SUMMARY ===
Total Features: 34
Passed: 33
Failed: 0
Warnings: 1
Skipped: 0
Success Rate: 100.0%

🎉 OVERALL STATUS: EXCELLENT STRUCTURE
The main.py system has excellent code structure and organization.

Completed at: 2025-07-08 16:03:53

======================================================================
 NEXT STEPS
======================================================================
📋 Code structure analysis complete!
🔧 To test full functionality, install dependencies:
   conda env create -f environment.yml && conda activate marksix_ai
💻 Then run: python main.py
